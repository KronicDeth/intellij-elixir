plugins {
  id 'org.jetbrains.intellij' version "0.2.15"
  id "org.jetbrains.kotlin.jvm" version "1.2.0"
  id 'de.undercouch.download' version "3.1.2"
}

ext {
  if (elixirVersion.startsWith("1.5") || elixirVersion.startsWith("1.6")) {
    quoterVersion = "1.0.0"
  } else {
    quoterVersion = "0.1.1"
  }

  quoterPath = "${rootDir}/cache/intellij_elixir-${quoterVersion}"

  if (elixirVersion.startsWith("1.5") || elixirVersion.startsWith("1.6")) {
    quoterExe = "${quoterPath}/_build/dev/rel/intellij_elixir/bin/intellij_elixir"
  } else {
    quoterExe = "${quoterPath}/rel/intellij_elixir/bin/intellij_elixir"
  }

  elixirPath = "${rootDir}/cache/elixir-${elixirVersion}"
}

allprojects {
  apply plugin: 'java'
  sourceCompatibility = javaVersion
  targetCompatibility = javaVersion
  tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

  sourceSets {
    main {
      java.srcDirs 'src', 'gen'
      resources.srcDirs 'resources', 'plugin/resources'
    }
    test {
      java.srcDir 'tests'
    }
  }

  apply plugin: 'org.jetbrains.intellij'
  intellij {
    def intellij_erlang_version

    if (ideaVersion.startsWith("2018.1")) {
      intellij_erlang_version = "0.11.976"
    } else if (ideaVersion.startsWith("2017.3")) {
      intellij_erlang_version = "0.10.966"
    } else if (ideaVersion.startsWith("2017.2")) {
      intellij_erlang_version = "0.9.958"
    } else if (ideaVersion.startsWith("2017.1.")) {
      intellij_erlang_version = "0.9.939"
    } else if (ideaVersion.startsWith("2016.3.")) {
      intellij_erlang_version = "0.9.912"
    } else {
      throw new IllegalArgumentException("ideaVersion is not a recognized MAJOR.MINOR for IntelliJ Erlang compatibility")
    }

    plugins = ["org.jetbrains.erlang:${intellij_erlang_version}",
               // always have IdeaVIM installed in sandbox
               "IdeaVIM:0.48",
               "PsiViewer:3.28.93"]
    pluginName 'intellij-elixir'
    version ideaVersion
    downloadSources Boolean.valueOf(sources)
    updateSinceUntilBuild = false
  }

  patchPluginXml {
    def stripTag = { text, tag -> text.replace("<${tag}>", "").replace("</${tag}>", "") }
    def bodyInnerHTML = { path ->
      stripTag(stripTag(file(path).text, "html"), "body")
    }

    changeNotes bodyInnerHTML("resources/META-INF/changelog.html")
    pluginDescription bodyInnerHTML("resources/META-INF/description.html")
  }

  publishPlugin {
    username publishUsername
    password publishPassword
    channels publishChannels
  }

  apply plugin: "kotlin"

  //noinspection GroovyAssignabilityCheck,GrUnresolvedAccess
  tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    //noinspection GrUnresolvedAccess
    kotlinOptions {
      apiVersion = "1.0"
      jvmTarget = "1.8"
    }
  }

  def compilationPackages = ['org/intellij/elixir/build/**', 'org/intellij/elixir/jps/**']

  test {
    environment "ELIXIR_LANG_ELIXIR_PATH", elixirPath
    environment "ELIXIR_EBIN_DIRECTORY", "${elixirPath}/lib/elixir/ebin/"
    environment "ELIXIR_VERSION", elixirVersion
    useJUnit {
      exclude compilationPackages
    }
    testLogging {
      exceptionFormat = 'full'
    }
  }

  task testCompilation(type: Test, group: 'Verification', dependsOn: [classes, testClasses]) {
    useJUnit {
      include compilationPackages
    }
    testLogging {
      exceptionFormat = 'full'
    }
  }
}

repositories {
  maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
  maven { url 'https://maven-central.storage.googleapis.com' }
  mavenCentral()
}

dependencies {
  compile project('jps-builder')
  compile project('jps-shared')
  compile group: 'org.erlang.otp', name: 'jinterface', version: '1.6.1'
  compile group: 'commons-io', name: 'commons-io', version: '2.5'

  testCompile group: 'org.mockito', name: 'mockito-core', version: '2.2.9'
  testCompile group: 'org.objenesis', name: 'objenesis', version: '2.4'
}

project(':jps-builder') {
  dependencies {
    compile project(':jps-shared')
  }
}

apply plugin: 'idea'
idea {
  project {
    jdkName = javaVersion
    languageLevel = javaVersion
  }
  module {
    generatedSourceDirs += file('gen')
  }
}

task getElixir {
  doLast {
    def folder = new File(elixirPath)

    if (!folder.isDirectory() || folder.list().size() == 0) {
      download {
        src "https://github.com/elixir-lang/elixir/archive/v${elixirVersion}.zip"
        dest "${rootDir}/cache/Elixir.${elixirVersion}.zip"
        overwrite false
      }
    }

    def binFolder = new File("${elixirPath}/bin")
    if (!binFolder.isDirectory() || folder.list().size() == 0) {
      copy {
        from zipTree("${rootDir}/cache/Elixir.${elixirVersion}.zip")
        into "${rootDir}/cache/"
      }

      exec {
        workingDir elixirPath
        commandLine "make"
      }
    }
  }
}

task getQuoter {
  doLast {
    download {
      src "https://github.com/KronicDeth/intellij_elixir/archive/v${quoterVersion}.zip"
      dest "${quoterPath}.zip"
      overwrite false
    }

    def folder = new File(quoterPath)
    if (!folder.isDirectory() || folder.list().size() == 0) {
      copy {
        from zipTree("${quoterPath}.zip")
        into "${rootDir}/cache/"
      }

      exec {
        workingDir quoterPath
        executable "mix"
        args "deps.get"
      }

      exec {
        workingDir quoterPath
        executable "mix"
        args "release"
      }
    }
  }
}

compileJava {
}

compileTestJava {
  dependsOn getElixir
  dependsOn getQuoter
}

task runQuoter(type: Exec, dependsOn: getQuoter) {
  executable quoterExe
  args "start"
}

task stopQuoter(type: Exec, dependsOn: getQuoter) {
  executable quoterExe
  args "stop"
}

test {
  dependsOn runQuoter
  finalizedBy stopQuoter
}

